import React from "react";
import Markdown from "react-markdown";
import { NtfyMessage, Topic } from "~/models";
import { hashCode } from "~/utils";

interface TopicMessageProps {
  message: NtfyMessage;
  doTopicColoring?: boolean;
  topicConfig?: Topic;
}

const pickTopicColor = (topic: string, topicConfig?: Topic) => {
  // Use configured color if available, otherwise generate one
  if (topicConfig?.color) {
    return topicConfig.color;
  }

  const code = hashCode(topic);
  return `hsl(${code % 360}, 70%, 60%)`;
};

const getTextColor = (backgroundColor: string) => {
  // Calculate luminance to determine text color (black for light, white for dark)

  // Handle both hex and HSL color formats
  let rgb: number[];

  if (backgroundColor.startsWith("#")) {
    // Convert hex to RGB
    const hex = backgroundColor.slice(1);
    const r = parseInt(hex.slice(0, 2), 16);
    const g = parseInt(hex.slice(2, 4), 16);
    const b = parseInt(hex.slice(4, 6), 16);
    rgb = [r, g, b];
  } else if (backgroundColor.startsWith("hsl")) {
    // For HSL colors generated by the old system, we need to parse them differently
    // This is a simplified approach - for HSL we'll just use a middle luminance calculation
    const hslMatch = backgroundColor.match(/hsl\((\d+),\s*(\d+)%,\s*(\d+)%\)/);
    if (hslMatch) {
      const lightness = parseInt(hslMatch[3]);
      // Convert lightness percentage to equivalent RGB for luminance calculation
      const rgbFromLightness = Math.round((lightness / 100) * 255);
      rgb = [rgbFromLightness, rgbFromLightness, rgbFromLightness];
    } else {
      rgb = [128, 128, 128]; // fallback
    }
  } else {
    // Fallback for other formats
    rgb = [128, 128, 128];
  }

  const lum = 0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2];
  return lum >= 128 ? "black" : "white";
};

const TopicMessage: React.FC<TopicMessageProps> = ({
  message,
  doTopicColoring,
  topicConfig,
}) => {
  const topicColor = doTopicColoring
    ? pickTopicColor(message.topic, topicConfig)
    : "";
  const textColor = doTopicColoring ? getTextColor(topicColor) : "";
  const formattedTime = new Date(message.time * 1000).toLocaleString([], {
    hour: "2-digit",
    minute: "2-digit",
    year: "numeric",
    month: "2-digit",
    day: "2-digit",
  });

  return (
    <div
      className={`rounded-lg px-4 py-2 shadow-sm`}
      style={{ color: textColor, backgroundColor: topicColor }}
    >
      <div className="flex items-center justify-between">
        {message.title ? (
          <b className="text-lg mr-2">{message.title}</b>
        ) : (
          <span /> // Empty span to maintain spacing
        )}
        <span className="text-sm">{formattedTime}</span>
      </div>
      <div>
        <Markdown>{message.message}</Markdown>
      </div>
    </div>
  );
};

export default TopicMessage;
